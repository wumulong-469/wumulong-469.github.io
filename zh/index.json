[{"content":"k8s容器编排，自动运维听说很火，听说现在流行生产测试发布一条龙的“全栈ops” 。于是去看了下k8s, 大概一周的k8s入门，只会搭建是不是没救了。为了以后搭建减少时间，特别再次记录下。\n准备一个linux系统(一个？？？) 这里我们准备一个linux，系统。这里我选的是kali 。用的是kali-last-snapshot的源（kali-rolling 不习惯了，只有rolling坏了，才怕roll了），准备搭建单节点把玩下，问就是没有钱卖电脑，童靴电脑也不愿借我折腾下。电脑内存大的可以考虑虚拟机多个系统。\nk8s环境准备,容器运行时，linux系统设置。 转发 IPv4 并让 iptables 看到桥接流量 k8s官方地址，桥接流量 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\roverlay\rbr_netfilter\rEOF\rsudo modprobe overlay\rsudo modprobe br_netfilter\r# 设置所需的 sysctl 参数，参数在重新启动后保持不变\rcat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\rnet.bridge.bridge-nf-call-iptables = 1\rnet.bridge.bridge-nf-call-ip6tables = 1\rnet.ipv4.ip_forward = 1\rEOF\r# 应用 sysctl 参数而不重新启动\rsudo sysctl --system 我也不理解，官方说的，就按照官方说的做把。内核参数基本是死的，就这样放着里，也没啥变动吧。。。我蒟蒻！\n安装容器运行时 k8s官方地址 ，生产环境的容器运行时介绍 这里我们容器运行时，选containerd。 原因如下： k8s放弃docker维护，docker要主懂适配k8s，这样就前途未知。 CRI-O适配的三方又比少，大多未验证。 Mirantis定位是docker企业版。 安装 containerd\napt install containerd containerd配置 安装了containerd之后，在/etc/containerd/下会有config.toml文件。但是这个apt打包的默文件我们不需要。 我们使用命令重新生成文件:\ncontainerd config default \u0026gt; /etc/containerd/config.toml 我们用vim打开修改2处\nSystemdGroup = true sandbox_image = \u0026ldquo;registry.aliyuncs.com/google_containers/pause:3.2\u0026rdquo; 用国内阿里的镜像防止拉不下来，如果你没有修改sandbox，会在创建集群出现找不到主机的问题 linux 关闭swap分区 运行不会有提示。可以用free命令查看\nswapoff -a 并且用vim打开/etc/fstab 加上noauto标签。 然后用如下命令应用改变\nsystemctl daemon-reload 不关swap可能会造成启动集群时候无法连接到kubelet。他会显示你的kubelet视乎没有启动\n关闭linuxse 。 使用getenforce查看。 使用setenforce关闭\ngetenforce\rsetenforce 0 找到/etc/sysconfig/selinux文件在文件中把SELINUX=enforcing ,改为 SELINUX=disabled。 kali本就disable,甚至没有selinux文件。kali的定位就不是渗透的吗，瞬间感觉这很河里？\nREBOOT后继续 安装k8s三套件 ，kubelet ，kubeadm ，kubectl kubelet是驻守程序 kubectl是k8s的控制api集合 kubeadm用来帮助建立k8s集群 下载kube套件。但是kali官方apt源没有，k8s官方推荐是添加谷歌的源，因为不可抗拒力，我们这里添加阿里的源。\nk8s官方安装教程 阿里镜像地址 # kali额外多安装个gnupg2\rapt install gnupg2\rapt-get update \u0026amp;\u0026amp; apt-get install -y apt-transport-https\rcurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/apt/sources.list.d/kubernetes.list\rdeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\rEOF\rapt-get update\rapt-get install -y kubelet kubeadm kubectl 输出太长就不上图了。这里上个版本号。 创建集群 kubeadm init \\ --apiserver-advertise-address=192.168.0.68 \\ --control-plane-endpoint=kali \\ --image-repository=registry.aliyuncs.com/google_containers \\\r--service-cidr=10.44.0.0/16 \\\r--pod-network-cidr=10.244.0.0/16 address，填本机地址，control填本机的名，image填写阿里云的镜像仓，service，pod-net分别是服务和pod的地址，不要网络地址冲突即可。\n详细介绍和更多参数：k8s官网kubeadm init介绍\n如果失败了，参数写错了。可以用kubeadm reset再此创建集群。\n出现下图说明安装成功： 按照他说的，导入下列的命令来管理集群。否者你的kubectl不可用。用户永久有效用\nmkdir -p $HOME/.kube\rsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\rsudo chown $(id -u):$(id -g) $HOME/.kube/config 仅本次登录有效用\nexport KUBECONFIG=/etc/kubernetes/admin.conf 为你的集群创建网络。 可以选用的网络框架地址\nhttps://kubernetes.io/docs/concepts/cluster-administration/addons/ 这里我们用calico。做个示范：\nwget https://docs.projectcalico.org/manifests/calico.yaml 我们vim打开下载好的calico.yaml 。修改CALICO_IPV4POOL_CIDR。和pod-network-cidr一样让k8s区分流量。 应用calico.yaml\nkubectl apply -f calico.yaml 图片展示： 查看容器运行状态 kubectl get pod -A 图片展示： 因为是单节点，工作不得交给主节点了。 下面一句是：描述下节点：kali (这里填自己主机名字)\nkubectl describe nodes kali 图片展示： 我们看到tainets。我们去掉这个污点。他就不会拒绝我们的工作任务。\nkubectl taint nodes kali node-role.kubernetes.io/control-plane:NoSchedule- 在这里顺手给打个节点标记master\nkubectl label node kali node-role.kubernetes.io/master=master 安装可视化面板 官方dashboard kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml 直接可以安装。我这里网络不好，我下载好yaml文件再安装。\n暴露端口 官方推荐是使用代理的方式 官方介绍，这里图方便用的是第二种编辑下service来暴露端口。\n下面这句意思是：我要编辑一下，在namespace： kubernetes-dashboard下的 service：kubernetes-dashboard 。n和svc都是简写。\nkubectl edit svc kubernetes-dashboard -n kubernetes-dashboard 我们改一处ClusterIP为NodePort，添加一处nodePort为32222。 图片展示： 访问一下，试试： 建立登陆账户 官方介绍 在kubernetes-dashboard名称空间中建立叫做admin-user的用户 （顺便提一下，k8s用大量yaml配置和管理，建议yaml文件都保存一下，方便以后学习和配置）\n建立admin-user.yaml 内容如下：\napiVersion: v1\rkind: ServiceAccount\rmetadata:\rname: admin-user\rnamespace: kubernetes-dashboard 把admin-user绑定为集群管理，建立bind-admin-user.yaml\napiVersion: rbac.authorization.k8s.io/v1\rkind: ClusterRoleBinding\rmetadata:\rname: admin-user\rroleRef:\rapiGroup: rbac.authorization.k8s.io\rkind: ClusterRole\rname: cluster-admin\rsubjects:\r- kind: ServiceAccount\rname: admin-user\rnamespace: kubernetes-dashboard 应用它：\nkubectl apply -f admin-user.yaml kubectl apply -f bind-admin-user.yaml 获得token\nkubectl -n kubernetes-dashboard create token admin-user 结束语\n暂时先写这些把。 ","permalink":"https://www.wumulong.space/zh/posts/k8s/","summary":"k8s容器编排，自动运维听说很火，听说现在流行生产测试发布一条龙的“全栈ops” 。于是去看了下k8s, 大概一周的k8s入门，只会搭建是不是没救了。为了以后搭建减少时间，特别再次记录下。\n准备一个linux系统(一个？？？) 这里我们准备一个linux，系统。这里我选的是kali 。用的是kali-last-snapshot的源（kali-rolling 不习惯了，只有rolling坏了，才怕roll了），准备搭建单节点把玩下，问就是没有钱卖电脑，童靴电脑也不愿借我折腾下。电脑内存大的可以考虑虚拟机多个系统。\nk8s环境准备,容器运行时，linux系统设置。 转发 IPv4 并让 iptables 看到桥接流量 k8s官方地址，桥接流量 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\roverlay\rbr_netfilter\rEOF\rsudo modprobe overlay\rsudo modprobe br_netfilter\r# 设置所需的 sysctl 参数，参数在重新启动后保持不变\rcat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\rnet.bridge.bridge-nf-call-iptables = 1\rnet.bridge.bridge-nf-call-ip6tables = 1\rnet.ipv4.ip_forward = 1\rEOF\r# 应用 sysctl 参数而不重新启动\rsudo sysctl --system 我也不理解，官方说的，就按照官方说的做把。内核参数基本是死的，就这样放着里，也没啥变动吧。。。我蒟蒻！\n安装容器运行时 k8s官方地址 ，生产环境的容器运行时介绍 这里我们容器运行时，选containerd。 原因如下： k8s放弃docker维护，docker要主懂适配k8s，这样就前途未知。 CRI-O适配的三方又比少，大多未验证。 Mirantis定位是docker企业版。 安装 containerd\napt install containerd containerd配置 安装了containerd之后，在/etc/containerd/下会有config.","title":"简单把玩下k8s"},{"content":"自己闲来无事记录和分享下下生活，通常用blog。搭建blog常见的wordpress基于php,皮肤好看配置也多。但是购入云服务太贵了，自己的服务器还有随时被刷的可能不好维护。那为啥不尝试下github.io 和 hugo ？ 静态界面，而且仓库托管方便维护。\n什么是 hugo ？ 他是一个基于go语言开发的，可以编写文档的模板翻译软件，通常搭配模板主题使用。可以把你markdown 文件，按照需要生成静态html文件。在javascript 中经常有这样的软件 ，比如webpack算一种吗？不太懂。但是hugo也不要你知道它是如何运行，你只要按照配置和规划放置文件位置即可 。Hugo项目地址 上面有对其的详细介绍。\n安装hugo 这里我使用scoop安装。还没有用上好用scoop软件管理工具，我建议先看我的以前教程 Scoop搭建来快速安装hugo。也可以在github的发行中下载二进制文件。\nscoop search hugo\rscoop install hugo-extended 我们这里安装hugo扩展。这样可以支持功能更广。有些hugo的主题框架要求安装hugo-extended\n图片展示 找一个hugo主题 你可以在Hugo官网中可以找到相应主题。如下图：\n比如我使用的主题 ： paperMod 。在github上也可找到相应的开源仓库。 paperMod仓库地址\n我们来到PaperMod 开源仓库的主页，我们可以看到它的Demo和样例站点文件，他会教会我们如何快速搭建。\n图示： 搭建hugo主题站点 到这一步，我认为你已经基本阅读完了paperMod的Demo中示例文章和markdown语法。\n我们先克隆下hugo的exampleSite 。在themes的文件夹中包含其他的项目模块。所以我们使用\u0026ndash;recursive克隆全部模块。\ngit clone --recursive -b exampleSite https://github.com/adityatelange/hugo-PaperMod.git 我们删除这里的.git和.github 文件。用vscode打开。并删除post下的内容。 然后删除post中的内容，因为有可能会有大陆访问不了的资源链接导致构建失败。我们在终端运行：\nhugo server 这样你就有了一个博客模板了。 撰写markdown并生成静态文件 我们先在vscode中安装辅助编辑的插件，注意这个插件会和通常写html:5冲突，如果你在用vscode编辑html:5页面。我建议先关闭hugo language插件。\n在post中建立一个文件夹做为一篇博客的工作目录，接下来就和你平常的记录markdown文件一样了，比如目前我的博客的结构。\n其中index.xx.md表示国际化在那个界面。如果全语言界面显示就用index.md。当然你的config.yml中也要配置好国际化。相信你在papermod的项目主页介绍中已经学会了。这里简单展示我的yaml配置:\n好了，现在我们就用\nhugo 来生成静态文件，生成的文件默认放在public文件夹下。\n部署上github.io来展示。 前排提醒， github.io 不是图床，不是云盘，不是cdn，初心是用于项目展示和组织介绍使用。 github.io 有仓库大小和流量使用的规范。在薅羊毛时候请用持续发展的方式对待。\n我们建立一个仓库，必须要是用\u0026lt;githubName\u0026gt;.github.io命令，必须选着public 公开仓库。\n然后我们就可以吧文章push到这个仓库，使用\u0026lt;githubName\u0026gt;.github.com 访问。\n如果还有小伙伴不熟悉git？下面是模板:\n在public的文件夹中。\ngit init\rgit remote add origin xxxxxxxx\rgit commit -m \u0026#39;xxxxx\u0026#39;\rgit push origin main/master 完成上传，或者在github网页上上传。完成效果？本网页就是哈 :P\n结束语 摸鱼中！橙汁龙快来摸鱼。别卷我了。\r","permalink":"https://www.wumulong.space/zh/posts/blog/","summary":"\u003cp\u003e自己闲来无事记录和分享下下生活，通常用blog。搭建blog常见的wordpress基于php,皮肤好看配置也多。但是购入云服务太贵了，自己的服务器还有随时被刷的可能不好维护。那为啥不尝试下github.io 和 hugo ？ 静态界面，而且仓库托管方便维护。\u003c/p\u003e","title":"基于github.io和hugo的简单的blog"},{"content":"论如何在国内环境下，如何优雅的使用scoop管理windows平台上工具的依赖和环境。让开发者无需担心的开发环境上的环境变量配置。\n关于Linux 和 Windows 的包管理。 在linux 下不同的发行版本通常携带不同的包管理器，比如redhat系的 yum ， debian下的apt ，arch 的 pacman 更或者是 alpine的 apk 。\n在windows 如今也加入与之类似的包管理工具 “winget” 。\n为啥选用scoop？ 首先windows 作为易用的图像化平台，还承载着大量娱乐方式。这是众多人即使有着linux忠实信徒，也并不愿意放弃windows的理由。但是我们可以取其精华取其糟粕使得自己获得更好的生活和开发体验。\n为啥不用原生的包管理 “winget” ： 默认安装路径并不明确，下载软件安装，你会得到不同的路径的安装结果。\n并不自动配置环境变量，或者链接文件。使得安装软件后你的自行搜索配置环境，加之第一条，你会迎来一个及其糟糕的体验。\n上架软件并没有进行精选筛选，下载安装的软件来路不明，而且winget声明并不对此负责。\n可以扩展的源少。\n正因为以上的缺点，winget并没有解决开发者的痛点。这使得我们转而使用scoop进行代替。\nScoop的安装 Scoop项目地址 Scoop安装地址 管理员模式安装: 打开你的powershell ， 然后键入： Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser 这里选择 接受，再键入如下： iex \u0026#34;\u0026amp; {$(irm get.scoop.sh)} -RunAsAdmin\u0026#34; 如果你想只给本用户安装: 在上诉第一步的基础上替换第二步为： irm get.scoop.sh | iex 图片展示：\n这里因为本人scoop上装了很多的软件，而且没有调整目录，就不卸载scoop进行重装演示。\n这个时候可用scoop help 查看帮助了\nScoop的下载加速。 启用多线程下载：（基于国内的环境我建议先安装aria2） 下载scoop使用,\nscoop install aria2 配置 aria2\nscoop config aria2-max-connection-per-server 16\rscoop config aria2-split 16\rscoop config aria2-min-split-size 1M 图片展示： 为scoop添加源: 下载git添加源(因为bucket仓库在gtihub上，需要git拉取): 在下载的时候会装配置7zip.用与解压。所以不用担心。\nscoop install git 这里添加java的源，可以添加的源在scoop项目的readme上有建议和标注。\nscoop bucket add java 我们添加Orcle的的篮子,当然这里大概率因为国内的环境会添加失败。当然可以选择国内的gitee托管。:D\n解决方法很多，如果方法他开源，而且有人维护，可以长久使用，那是再好不过了。:P\n我用的解决方案是对自己合适的，只提供参考：\n我使用的是watt toolkit。 这样一款为的工具软件，他包含了github加速的功能，到目前还保证着纯净好使的特点。也不止是github的加速功能，还包含了一些平台的验证。本人爱玩一款名为elite dangerous的游戏，游戏数据查询网站的google验证也可被代理，等等。\n本片讨论的是scoop，这里就简单跳过了。\n用scoop安装openjdk 准备工作，源是否正常: 我们先查看是否成功添加源\nscoop bucket list 如果没有添加成功,再次删除和添加\nscoop bucket rm \u0026lt;bucket-name\u0026gt; scoop bucket add \u0026lt;bucket-name\u0026gt; 图片展示： 进行更新保证我们下载的软件是最新的: 更新本地缓存列表（其实不需要每次都更行，在隔时间scoop会在你安装软件前自动更新）\nscoop update 图片展示： 搜索openjdk,并安装: 搜索openjdk,可以看到有很多的版本可选安装，而且标注了来自的bucket\nscoop search openjdk 我们选择 openjdk11 安装 ，下载还是很给力，aria2跑满了我的200mbps的带宽。\nscoop install openjdk11 验证安装\njava -version 图片展示： 结束语 原来写blog这么累啊，写了一个小时，才挤了这么点牙膏。好难啊！！！","permalink":"https://www.wumulong.space/zh/posts/scoop/","summary":"\u003cp\u003e论如何在国内环境下，如何优雅的使用scoop管理windows平台上工具的依赖和环境。让开发者无需担心的开发环境上的环境变量配置。\u003c/p\u003e","title":"Scoop简单使用"},{"content":"在安卓上为chroot中的环境取得微小的OpenGL硬件加速效果，顺便记录下捡垃圾日记的折腾日记。\n背景 淘机经历 我在二手市场以300元的价格淘来个一台lg v50 tinq。战损橙色，卖家说是自行车碾过，还可以开机使用。我也不嫌弃，买来过来用来体验arm下的linux环境也不错。一体会下现代手机处理器的性能。\n着手刷机 手机到手，卖家已经是root过了。竟然root过了，那就换个系统把！通过XDA，我安装找到了 LineageOS 的安装包，而且附有内核的源码。（XDA教程和安装）。\n先通过magisk安装twrp。进入twrp，刷入zip，再刷入解锁data分区工具。有多年搞机经验刷机还算顺利。就是新机型的A/B分区和data加密机制让我重刷了2，3次才找到技巧。而且lg v50 thinq这台机器默认是不开放bootloader，只有再检测到内核损毁或与系统版本不一致才会跳转bootloader。那只有用破解的官方工具包刷个内核和系统不一致的版本，才可以进bootloader。如果早知道，就找个好刷的机器了。\n完成后我立即安装了自己添加了zstdcat的Linux Deploy ，这样就可以修复ubuntu22.04的安装。其实后来在LinuxDeploy项目的pr中才发现有人已经提交了请求，并且用他的复刻的代码编译即可用（哎呀，白干了）。LinuxDeploy项目地址\n使用linuxdeploy在自己手机上就可以简单的搭建一个类linux的环境了哈。\n开始安装Turnip 环境装备 建议系统版本，ubuntu22.04 , kali-rolling 。\n\u0026ldquo;目前\u0026quot;我建议的mesa版本是20.0.5。因为这个mesa版本很新，所以建议用较新的系统编译，以免出现一系列的依赖问题。\nmesa20.0.5地址\n先下载mesa用unzip解压。进入目录.\nwget https://github.com/Mesa3D/mesa/archive/refs/tags/mesa-22.0.5.zip\runzip mesa-22.0.5.zip\rcd mesa-mesa-22.0.5 并安装编译工具，这里要段时间。\napt build-dep mesa 展示： 编译开始 加入编译条件，条件：\nmeson build -D platforms=x11,wayland -D gallium-drivers=swrast,virgl,zink -D vulkan-drivers=freedreno -D dri3=enabled -D egl=enabled -D gles2=enabled -D glvnd=true -D glx=dri -D libunwind=disabled -D osmesa=true -D shared-glapi=enabled -D microsoft-clc=disabled -D valgrind=disabled --prefix /usr -D gles1=disabled -D freedreno-kgsl=true 出自于：mesa-turnip-kgsl\n展示： 添加drm.h的目录,否则编译到一半会遇到找不到 drm.h。\nexport C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/include/libdrm/ 进入build目录,开始编译安装\ncd build\rninja install 等待编译完成。\n完成展示： 验证测试 逆向加速？ 我们可以用\nexport MESA_LOADER_DRIVER_OVERRIDE=zink\rexport GALLIUM_DRIVER=zink 来指定mesa是用zink驱动。\nexport MESA_LOADER_DRIVER_OVERRIDE=\rexport GALLIUM_DRIVER= 返回默认驱动,或者关了你的控制台。\n基础性能测试默认驱动：\n切换zink驱动： 好像还降速了？？？本人使用的骁龙855，经过一段时间探究，其实是万年羸弱的arm小核心导致。\n再次测试 这次我们让程序亲和大核心。\ntaskset -c 4-7 glxgears 基础性能测试默认驱动： 切换zink驱动： 这次可以看到明显的大约超约100帧，经过实测分辨率压力越大，加速效果越明显。\n较为简单的调优测试 我找到sys文件夹的cpu设备和gpu设备，把gpu最低频率拉高，并且cpu屏蔽小核心，调度器写userspace。\n跑分没意思，chromium的使用 记得先指定zink驱动，再启动chromium。 如果你嫌麻烦可以把这2条写入 .bashrc 。\n地址栏输入\nchrome://flags 打开 重载设备列表，让chrome使用你这“莫名奇妙”得来的opengl硬件加速。\n查看自己的硬件信息\nchrome://gpu 结束语 折磨人的不仅有不断冒出的段错误还有高数。 ","permalink":"https://www.wumulong.space/zh/posts/turnip/","summary":"\u003cp\u003e在安卓上为chroot中的环境取得微小的OpenGL硬件加速效果，顺便记录下捡垃圾日记的折腾日记。\u003c/p\u003e","title":"从捡垃圾到安装Turnip驱动安装和食用"}]